import random
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import PICS, ADMINS
from Script import script
from database.database import db
import logging

logger = logging.getLogger(__name__)

@Client.on_callback_query(filters.regex("^start$"))
async def start_callback(client, query: CallbackQuery):
    """Handle start button callback"""
    try:
        if query.from_user.id in ADMINS:
            buttons = [
                [
                    InlineKeyboardButton('üë§ ·¥ús·¥á Äs', callback_data='stats'),
                    InlineKeyboardButton('üì¢  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ', callback_data='broadcast')
                ],
                # --- THIS LINE IS FIXED ---
                [InlineKeyboardButton('ü§ñ ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ñ ü·¥è…¥·¥ás', callback_data='clone')],
                [InlineKeyboardButton('‚öôÔ∏è s·¥á·¥õ·¥õ…™…¥…¢s', callback_data='settings')]
            ]
            await query.message.edit_text(
                script.ADMIN_START.format(query.from_user.mention),
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        else:
            buttons = [
                [
                    InlineKeyboardButton('üíÅ‚Äç‚ôÄÔ∏è  ú·¥á ü·¥ò', callback_data='help'),
                    InlineKeyboardButton('üòä ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
                ],
                [InlineKeyboardButton('ü§ñ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á  è·¥è·¥ú Ä ·¥è·¥°…¥ ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ', callback_data='clone')],
                [InlineKeyboardButton('üì¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url='https://t.me/your_channel')]
            ]
            await query.message.edit_text(
                script.START_TXT.format(query.from_user.mention, client.me.mention),
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        await query.answer()
    except Exception as e:
        logger.error(f"Error in start callback: {e}")
        await query.answer("An error occurred!", show_alert=True)

# ... (rest of the file is correct and remains unchanged)
# ...
@Client.on_callback_query(filters.regex("^help$"))
async def help_callback(client, query: CallbackQuery):
    """Handle help button callback"""
    try:
        buttons = [[InlineKeyboardButton('üè†  ú·¥è·¥ç·¥á', callback_data='start')]]
        await query.message.edit_text(script.HELP_TXT, reply_markup=InlineKeyboardMarkup(buttons))
        await query.answer()
    except Exception as e:
        logger.error(f"Error in help callback: {e}")
        await query.answer("An error occurred!", show_alert=True)

@Client.on_callback_query(filters.regex("^about$"))
async def about_callback(client, query: CallbackQuery):
    """Handle about button callback"""
    try:
        buttons = [[InlineKeyboardButton('üè†  ú·¥è·¥ç·¥á', callback_data='start')]]
        await query.message.edit_text(script.ABOUT_TXT, reply_markup=InlineKeyboardMarkup(buttons))
        await query.answer()
    except Exception as e:
        logger.error(f"Error in about callback: {e}")
        await query.answer("An error occurred!", show_alert=True)

@Client.on_callback_query(filters.regex("^stats$"))
async def stats_callback(client, query: CallbackQuery):
    """Handle stats button callback (Admin only)"""
    if query.from_user.id not in ADMINS:
        return await query.answer("Admin only!", show_alert=True)
    
    try:
        total_users = await db.total_users_count()
        buttons = [[InlineKeyboardButton('üîô  ô·¥Ä·¥Ñ·¥ã', callback_data='start')]]
        await query.message.edit_text(
            f"<b>üìä B·¥è·¥õ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs</b>\n\nüë• T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}\nü§ñ B·¥è·¥õ: @{client.me.username}",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        await query.answer()
    except Exception as e:
        logger.error(f"Error in stats callback: {e}")
        await query.answer("An error occurred!", show_alert=True)

@Client.on_callback_query(filters.regex("^broadcast$"))
async def broadcast_callback(client, query: CallbackQuery):
    """Handle broadcast button callback (Admin only)"""
    if query.from_user.id not in ADMINS:
        return await query.answer("Admin only!", show_alert=True)
    
    try:
        buttons = [[InlineKeyboardButton('üîô  ô·¥Ä·¥Ñ·¥ã', callback_data='start')]]
        await query.message.edit_text(
            "<b>üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ M·¥áss·¥Ä…¢·¥á</b>\n\n"
            "Reply to a message with /broadcast to send it to all users.",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        await query.answer()
    except Exception as e:
        logger.error(f"Error in broadcast callback: {e}")
        await query.answer("An error occurred!", show_alert=True)

@Client.on_callback_query(filters.regex("^settings$"))
async def settings_callback(client, query: CallbackQuery):
    """Handle settings button callback (Admin only)"""
    if query.from_user.id not in ADMINS:
        return await query.answer("Admin only!", show_alert=True)
    
    try:
        buttons = [
            [
                InlineKeyboardButton('üîí “ì·¥è Ä·¥Ñ·¥á s·¥ú ô', callback_data='toggle_fsub'),
                InlineKeyboardButton('‚è±Ô∏è ·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data='toggle_autodel')
            ],
            [
                InlineKeyboardButton('üìÅ “ì…™ ü·¥á s·¥õ·¥è Ä·¥á', callback_data='toggle_filestore'),
                InlineKeyboardButton('üåä s·¥õ Ä·¥á·¥Ä·¥ç', callback_data='toggle_stream')
            ],
            [InlineKeyboardButton('üîô  ô·¥Ä·¥Ñ·¥ã', callback_data='start')]
        ]
        
        await query.message.edit_text(
            "<b>‚öôÔ∏è B·¥è·¥õ S·¥á·¥õ·¥õ…™…¥…¢s</b>\n\nM·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥Ñ·¥è…¥“ì…™…¢·¥ú Ä·¥Ä·¥õ…™·¥è…¥:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        await query.answer()
    except Exception as e:
        logger.error(f"Error in settings callback: {e}")
        await query.answer("An error occurred!", show_alert=True)

@Client.on_callback_query(filters.regex("^toggle_(fsub|autodel|filestore|stream)$"))
async def toggle_settings(client, query: CallbackQuery):
    """Handle toggle buttons - placeholder"""
    await query.answer("This feature is under development!", show_alert=True)

@Client.on_callback_query(filters.regex("^close$"))
async def close_callback(client, query: CallbackQuery):
    """Handle close button"""
    try:
        await query.message.delete()
        await query.answer()
    except Exception as e:
        logger.error(f"Error in close callback: {e}")
        await query.answer()

@Client.on_callback_query(filters.regex("^pages$"))
async def pages_callback(client, query: CallbackQuery):
    """Handle pagination info"""
    await query.answer("Use the navigation buttons!", show_alert=False)

logger.info("‚úÖ Main callbacks loaded")
