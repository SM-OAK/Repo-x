import re
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.clone_db import clone_db
import logging

logger = logging.getLogger(__name__)

# --- Main Customization Menu ---
@Client.on_callback_query(filters.regex("^customize_"))
async def customize_clone(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[1])
    clone = await clone_db.get_clone(bot_id)
    
    if not clone or clone['user_id'] != query.from_user.id:
        return await query.answer("This is not your clone!", show_alert=True)
    
    buttons = [
        [
            InlineKeyboardButton('üìù s·¥õ·¥Ä Ä·¥õ ·¥çs…¢', callback_data=f'set_start_{bot_id}'),
            InlineKeyboardButton('üîí “ì·¥è Ä·¥Ñ·¥á s·¥ú ô', callback_data=f'set_fsub_{bot_id}')
        ],
        [
            InlineKeyboardButton('üë• ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs', callback_data=f'set_mods_{bot_id}'),
            InlineKeyboardButton('‚è±Ô∏è ·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data=f'set_autodel_{bot_id}')
        ],
        [
            InlineKeyboardButton('üö´ …¥·¥è “ì·¥è Ä·¥°·¥Ä Ä·¥Ö', callback_data=f'set_nofw_{bot_id}'),
            InlineKeyboardButton('üîë ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è·¥ã·¥á–Ω', callback_data=f'view_token_{bot_id}')
        ],
        [
            InlineKeyboardButton('üìä s·¥õ·¥Ä·¥õs', callback_data=f'clone_stats_{bot_id}'),
            InlineKeyboardButton('üîÑ  Ä·¥ás·¥õ·¥Ä Ä·¥õ', callback_data=f'restart_{bot_id}')
        ],
        [
            InlineKeyboardButton('üîô  ô·¥Ä·¥Ñ·¥ã', callback_data='clone'),
            InlineKeyboardButton('üóëÔ∏è ·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data=f'delete_{bot_id}')
        ]
    ]
    
    settings_text = (
        f"<b>üõ†Ô∏è C·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á C ü·¥è…¥·¥á</b>\n\n"
        f"‚ûú <b>N·¥Ä·¥ç·¥á:</b> {clone['name']}\n"
        f"‚ûú <b>Us·¥á Ä…¥·¥Ä·¥ç·¥á:</b> @{clone['username']}</b>"
    )
    
    await query.message.edit_text(settings_text, reply_markup=InlineKeyboardMarkup(buttons))


# --- 1. START MESSAGE ---

@Client.on_callback_query(filters.regex("^set_start_"))
async def set_start_msg(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    buttons = [
        [
            InlineKeyboardButton('‚úèÔ∏è S·¥á·¥õ T·¥áx·¥õ', callback_data=f'start_text_{bot_id}'),
            InlineKeyboardButton('üñºÔ∏è S·¥á·¥õ P ú·¥è·¥õ·¥è', callback_data=f'start_photo_{bot_id}')
        ],
        [InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'customize_{bot_id}')]
    ]
    await query.message.edit_text("<b>üñºÔ∏è S·¥õ·¥Ä Ä·¥õ M·¥áss·¥Ä…¢·¥á O·¥ò·¥õ…™·¥è…¥s</b>", reply_markup=InlineKeyboardMarkup(buttons))

@Client.on_callback_query(filters.regex("^start_text_"))
async def set_start_text_msg(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    back_button = InlineKeyboardMarkup([[InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'set_start_{bot_id}')]])
    try:
        msg_req = await client.ask(
            chat_id=query.from_user.id,
            text="S·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç s·¥õ·¥Ä Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á …¥·¥è·¥°.",
            filters=filters.text, timeout=300
        )
        await clone_db.update_clone_setting(bot_id, 'start_message', msg_req.text)
        await clone_db.update_clone_setting(bot_id, 'start_photo', None)
        await query.message.edit_text("‚úÖ S·¥õ·¥Ä Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!", reply_markup=back_button)
    except:
        await query.message.edit_text("T…™·¥ç·¥á·¥è·¥ú·¥õ!", reply_markup=back_button)

@Client.on_callback_query(filters.regex("^start_photo_"))
async def set_start_photo_msg(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    back_button = InlineKeyboardMarkup([[InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'set_start_{bot_id}')]])
    try:
        msg_req = await client.ask(
            chat_id=query.from_user.id,
            text="S·¥á…¥·¥Ö ·¥Ä ·¥ò ú·¥è·¥õ·¥è. T ú·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ ·¥°…™ ü ü  ô·¥á ·¥ús·¥á·¥Ö ·¥Äs ·¥õ ú·¥á s·¥õ·¥Ä Ä·¥õ ·¥õ·¥áx·¥õ.",
            filters=filters.photo, timeout=300
        )
        await clone_db.update_clone_setting(bot_id, 'start_photo', msg_req.photo.file_id)
        await clone_db.update_clone_setting(bot_id, 'start_message', msg_req.caption.html if msg_req.caption else None)
        await query.message.edit_text("‚úÖ S·¥õ·¥Ä Ä·¥õ ·¥ò ú·¥è·¥õ·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!", reply_markup=back_button)
    except:
        await query.message.edit_text("T…™·¥ç·¥á·¥è·¥ú·¥õ!", reply_markup=back_button)


# --- 2. FORCE SUB ---

@Client.on_callback_query(filters.regex("^set_fsub_"))
async def set_force_sub(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    clone = await clone_db.get_clone(bot_id)
    channels = clone.get('settings', {}).get('force_sub_channels', [])
    buttons = []
    for channel in channels:
        buttons.append([InlineKeyboardButton(f'‚ùå {channel}', callback_data=f'rm_fsub_{bot_id}_{channel}')])
    if len(channels) < 4:
        buttons.append([InlineKeyboardButton('‚ûï A·¥Ö·¥Ö C ú·¥Ä…¥…¥·¥á ü', callback_data=f'add_fsub_{bot_id}')])
    buttons.append([InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'customize_{bot_id}')])
    text = f"<b>üîí F·¥è Ä·¥Ñ·¥á S·¥ú ô S·¥á·¥õ·¥õ…™…¥…¢s</b>\n\nYou have added {len(channels)} of 4 channels."
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

@Client.on_callback_query(filters.regex("^add_fsub_"))
async def add_fsub_channel_handler(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    try:
        msg = await client.ask(
            chat_id=query.from_user.id,
            text="S·¥á…¥·¥Ö ·¥õ ú·¥á ID ·¥è“ì ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö.",
            filters=filters.text, timeout=300
        )
        channel_id = int(msg.text)
        await clone_db.add_fsub_channel(bot_id, channel_id)
        await query.answer("Channel added successfully!", show_alert=True)
    except:
        await query.answer("Invalid ID or timeout.", show_alert=True)
    await set_force_sub(client, query)

@Client.on_callback_query(filters.regex("^rm_fsub_"))
async def remove_fsub_channel_handler(client, query: CallbackQuery):
    _, _, bot_id, channel_id = query.data.split("_")
    await clone_db.remove_fsub_channel(int(bot_id), int(channel_id))
    await query.answer("Channel removed successfully!", show_alert=True)
    await set_force_sub(client, query)


# --- 3. AUTO DELETE ---

@Client.on_callback_query(filters.regex("^set_autodel_"))
async def set_auto_delete(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    clone = await clone_db.get_clone(bot_id)
    settings = clone.get('settings', {})
    status = "E…¥·¥Ä ô ü·¥á·¥Ö ‚úÖ" if settings.get('auto_delete') else "D…™s·¥Ä ô ü·¥á·¥Ö ‚ùå"
    time = settings.get('auto_delete_time', 1800) // 60
    buttons = [
        [InlineKeyboardButton('‚è±Ô∏è C ú·¥Ä…¥…¢·¥á T…™·¥ç·¥á', callback_data=f'autodel_time_{bot_id}')],
        [
            InlineKeyboardButton('‚úÖ E…¥·¥Ä ô ü·¥á', callback_data=f'toggle_autodel_{bot_id}_true'),
            InlineKeyboardButton('‚ùå D…™s·¥Ä ô ü·¥á', callback_data=f'toggle_autodel_{bot_id}_false')
        ],
        [InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'customize_{bot_id}')]
    ]
    text = f"<b>‚è±Ô∏è A·¥ú·¥õ·¥è D·¥á ü·¥á·¥õ·¥á S·¥á·¥õ·¥õ…™…¥…¢s</b>\n\nS·¥õ·¥Ä·¥õ·¥ús: <b>{status}</b>\nD·¥á ü·¥á·¥õ·¥á A“ì·¥õ·¥á Ä: <b>{time} ·¥ç…™…¥·¥ú·¥õ·¥ás</b>"
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

@Client.on_callback_query(filters.regex("^toggle_autodel_"))
async def toggle_auto_delete(client, query: CallbackQuery):
    _, _, bot_id, status_str = query.data.split("_")
    status = status_str == 'true'
    await clone_db.update_clone_setting(int(bot_id), 'auto_delete', status)
    await query.answer(f"Auto Delete {'Enabled' if status else 'Disabled'}!", show_alert=True)
    await set_auto_delete(client, query)

@Client.on_callback_query(filters.regex("^autodel_time_"))
async def change_autodel_time(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    try:
        msg = await client.ask(
            chat_id=query.from_user.id,
            text="S·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ…™·¥ç·¥á …™…¥ **·¥ç…™…¥·¥ú·¥õ·¥ás**.",
            filters=filters.text, timeout=300
        )
        time_in_seconds = int(msg.text) * 60
        await clone_db.update_clone_setting(bot_id, 'auto_delete_time', time_in_seconds)
        await query.answer("Time updated successfully!", show_alert=True)
    except:
        await query.answer("Invalid input or timeout.", show_alert=True)
    await set_auto_delete(client, query)


# --- 4. OTHER UTILITIES ---

@Client.on_callback_query(filters.regex("^clone_stats_"))
async def clone_stats(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    clone = await clone_db.get_clone(bot_id)
    users = await clone_db.get_clone_users_count(bot_id)
    await query.message.edit_text(
        f"<b>üìä C ü·¥è…¥·¥á S·¥õ·¥Ä·¥õs</b>\n\nB·¥è·¥õ: @{clone['username']}\nUs·¥á Äs: {users}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'customize_{bot_id}')]])
    )

@Client.on_callback_query(filters.regex("^restart_"))
async def restart_clone(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[1])
    await query.answer("This feature is not implemented yet.", show_alert=True)

@Client.on_callback_query(filters.regex("^delete_"))
async def delete_clone_confirm(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[1])
    buttons = [
        [
            InlineKeyboardButton('‚úÖ Y·¥ás', callback_data=f'confirm_delete_{bot_id}'),
            InlineKeyboardButton('‚ùå N·¥è', callback_data=f'customize_{bot_id}')
        ]
    ]
    await query.message.edit_text("‚ö†Ô∏è <b>A Ä·¥á  è·¥è·¥ú s·¥ú Ä·¥á?</b>", reply_markup=InlineKeyboardMarkup(buttons))

@Client.on_callback_query(filters.regex("^confirm_delete_"))
async def confirm_delete_clone(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    if bot_id in ACTIVE_CLONES:
        try:
            await ACTIVE_CLONES[bot_id].stop()
        except: pass
        del ACTIVE_CLONES[bot_id]
    await clone_db.delete_clone_by_id(bot_id)
    await query.answer("Clone stopped and deleted successfully!", show_alert=True)
    try:
        from plugins.clone_manager import clone_callback
        await clone_callback(client, query)
    except:
        await query.message.edit_text("Clone deleted. Please go back to the main menu.")

