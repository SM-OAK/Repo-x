from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.clone_db import clone_db
from Script import script
import logging

logger = logging.getLogger(__name__)

# Customize clone callback
@Client.on_callback_query(filters.regex("^customize_"))
async def customize_clone(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[1])
    clone = await clone_db.get_clone(bot_id)
    
    if not clone:
        return await query.answer("Clone not found!", show_alert=True)
    
    if clone['user_id'] != query.from_user.id:
        return await query.answer("This is not your clone!", show_alert=True)
    
    buttons = [
        [
            InlineKeyboardButton('üìù s·¥õ·¥Ä Ä·¥õ ·¥çs…¢', callback_data=f'set_start_{bot_id}'),
            InlineKeyboardButton('üîí “ì·¥è Ä·¥Ñ·¥á s·¥ú ô', callback_data=f'set_fsub_{bot_id}')
        ],
        [
            InlineKeyboardButton('üë• ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs', callback_data=f'set_mods_{bot_id}'),
            InlineKeyboardButton('‚è±Ô∏è ·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data=f'set_autodel_{bot_id}')
        ],
        [
            InlineKeyboardButton('üö´ …¥·¥è “ì·¥è Ä·¥°·¥Ä Ä·¥Ö', callback_data=f'set_nofw_{bot_id}'),
            InlineKeyboardButton('üîë ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è·¥ã·¥á…¥', callback_data=f'view_token_{bot_id}')
        ],
        [
            InlineKeyboardButton('üîÑ ·¥ç·¥è·¥Ö·¥á', callback_data=f'set_mode_{bot_id}'),
            InlineKeyboardButton('‚ùå ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á', callback_data=f'deactivate_{bot_id}')
        ],
        [
            InlineKeyboardButton('üìä s·¥õ·¥Ä·¥õs', callback_data=f'clone_stats_{bot_id}'),
            InlineKeyboardButton('üîÑ  Ä·¥ás·¥õ·¥Ä Ä·¥õ', callback_data=f'restart_{bot_id}')
        ],
        [
            InlineKeyboardButton('üîô  ô·¥Ä·¥Ñ·¥ã', callback_data='clone'),
            InlineKeyboardButton('üóëÔ∏è ·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data=f'delete_{bot_id}')
        ]
    ]
    
    settings_text = (
        f"<b>üõ†Ô∏è C·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á C ü·¥è…¥·¥á</b>\n\n"
        f"‚ûú <b>N·¥Ä·¥ç·¥á:</b> {clone['name']}\n"
        f"‚ûú <b>Us·¥á Ä…¥·¥Ä·¥ç·¥á:</b> @{clone['username']}\n\n"
        f"C·¥è…¥“ì…™…¢·¥ú Ä·¥á  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á s·¥á·¥õ·¥õ…™…¥…¢s ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥°:"
    )
    
    await query.message.edit_text(settings_text, reply_markup=InlineKeyboardMarkup(buttons))

# Start message setting
@Client.on_callback_query(filters.regex("^set_start_"))
async def set_start_msg(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    await query.message.edit_text("<b>üìù S·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç s·¥õ·¥Ä Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á:</b>\n\nUs·¥á /cancel ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü")
    
    try:
        msg = await client.ask(query.message.chat.id, timeout=300)
        if msg.text == '/cancel':
            return await query.message.edit_text("C·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö!")
        
        await clone_db.update_clone_setting(bot_id, 'start_message', msg.text)
        await query.message.edit_text(
            "‚úÖ S·¥õ·¥Ä Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'customize_{bot_id}')]])
        )
    except:
        await query.message.edit_text("T…™·¥ç·¥á·¥è·¥ú·¥õ!")

# Force sub setting
@Client.on_callback_query(filters.regex("^set_fsub_"))
async def set_force_sub(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    await query.message.edit_text("<b>üîí S·¥á…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü ID:</b>\n\nEx·¥Ä·¥ç·¥ò ü·¥á: <code>-100123456789</code>\n\nUs·¥á /cancel ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü")
    
    try:
        msg = await client.ask(query.message.chat.id, timeout=300)
        if msg.text == '/cancel':
            return await query.message.edit_text("C·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö!")
        
        await clone_db.update_clone_setting(bot_id, 'force_sub_channel', int(msg.text))
        await query.message.edit_text(
            "‚úÖ F·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'customize_{bot_id}')]])
        )
    except:
        await query.message.edit_text("I…¥·¥†·¥Ä ü…™·¥Ö ID!")

# Auto delete toggle
@Client.on_callback_query(filters.regex("^set_autodel_"))
async def set_auto_delete(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    clone = await clone_db.get_clone(bot_id)
    current = clone.get('settings', {}).get('auto_delete', False)
    
    buttons = [
        [
            InlineKeyboardButton('‚úÖ E…¥·¥Ä ô ü·¥á' if not current else '‚úÖ E…¥·¥Ä ô ü·¥á·¥Ö', callback_data=f'toggle_autodel_{bot_id}_true'),
            InlineKeyboardButton('‚ùå D…™s·¥Ä ô ü·¥á' if current else '‚ùå D…™s·¥Ä ô ü·¥á·¥Ö', callback_data=f'toggle_autodel_{bot_id}_false')
        ],
        [InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'customize_{bot_id}')]
    ]
    
    await query.message.edit_text(
        f"<b>‚è±Ô∏è A·¥ú·¥õ·¥è D·¥á ü·¥á·¥õ·¥á</b>\n\nC·¥ú Ä Ä·¥á…¥·¥õ: {'E…¥·¥Ä ô ü·¥á·¥Ö' if current else 'D…™s·¥Ä ô ü·¥á·¥Ö'}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

@Client.on_callback_query(filters.regex("^toggle_autodel_"))
async def toggle_auto_delete(client, query: CallbackQuery):
    data = query.data.split("_")
    bot_id = int(data[2])
    status = data[3] == 'true'
    await clone_db.update_clone_setting(bot_id, 'auto_delete', status)
    await query.answer(f"{'E…¥·¥Ä ô ü·¥á·¥Ö' if status else 'D…™s·¥Ä ô ü·¥á·¥Ö'}!")
    await set_auto_delete(client, query)

# Clone stats
@Client.on_callback_query(filters.regex("^clone_stats_"))
async def clone_stats(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    clone = await clone_db.get_clone(bot_id)
    users = await clone_db.get_clone_users_count(bot_id)
    
    await query.message.edit_text(
        f"<b>üìä C ü·¥è…¥·¥á S·¥õ·¥Ä·¥õs</b>\n\n"
        f"ü§ñ B·¥è·¥õ: @{clone['username']}\n"
        f"üë• Us·¥á Äs: {users}\n"
        f"üìÖ C Ä·¥á·¥Ä·¥õ·¥á·¥Ö: {clone.get('created_at', 'N/A')}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô B·¥Ä·¥Ñ·¥ã', callback_data=f'customize_{bot_id}')]])
    )

# Restart clone
@Client.on_callback_query(filters.regex("^restart_"))
async def restart_clone(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[1])
    await query.answer("R·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥Ñ ü·¥è…¥·¥á...", show_alert=True)
    # Add restart logic here

# Delete clone
@Client.on_callback_query(filters.regex("^delete_(?!clone)"))
async def delete_clone_confirm(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[1])
    
    buttons = [
        [
            InlineKeyboardButton('‚úÖ Y·¥ás', callback_data=f'confirm_delete_{bot_id}'),
            InlineKeyboardButton('‚ùå N·¥è', callback_data=f'customize_{bot_id}')
        ]
    ]
    
    await query.message.edit_text(
        "‚ö†Ô∏è <b>A Ä·¥á  è·¥è·¥ú s·¥ú Ä·¥á?</b>\n\nT ú…™s ·¥°…™ ü ü ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ ü è ·¥Ö·¥á ü·¥á·¥õ·¥á  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á!",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

@Client.on_callback_query(filters.regex("^confirm_delete_"))
async def confirm_delete_clone(client, query: CallbackQuery):
    bot_id = int(query.data.split("_")[2])
    clone = await clone_db.get_clone(bot_id)
    
    if clone['user_id'] != query.from_user.id:
        return await query.answer("Access denied!", show_alert=True)
    
    await clone_db.delete_clone_by_id(bot_id)
    await query.message.edit_text("‚úÖ C ü·¥è…¥·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!")ÔøºEnter
